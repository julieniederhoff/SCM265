import React, { useState } from 'react';

const ServiceLevelSim = () => {
  const [gameStarted, setGameStarted] = useState(false);
  const [serviceLevels, setServiceLevels] = useState({});
  const [costOfShortage, setCostOfShortage] = useState({});
  const [costOfExcess, setCostOfExcess] = useState({});
  const [optimalServiceLevel, setOptimalServiceLevel] = useState({});
  const [results, setResults] = useState(null);
  const [showAnalysis, setShowAnalysis] = useState(false);

  const PERIODS = 20; // Run simulation over 20 periods
  const MIN_DEMAND = 50;
  const MAX_DEMAND = 150;

  const products = [
    {
      id: 'electronics',
      name: 'Premium Headphones',
      icon: 'üéß',
      retail: 200,
      wholesale: 80,
      salvage: 40,
      category: 'High Margin'
    },
    {
      id: 'fashion',
      name: 'Designer Jacket',
      icon: 'üß•',
      retail: 300,
      wholesale: 120,
      salvage: 60,
      category: 'High Margin'
    },
    {
      id: 'tablet',
      name: 'Budget Tablet',
      icon: 'üì±',
      retail: 210,
      wholesale: 150,
      salvage: 60,
      category: 'Very Low Margin'
    },
    {
      id: 'laptop',
      name: 'Laptop Computer',
      icon: 'üíª',
      retail: 1200,
      wholesale: 1080,
      salvage: 1020,
      category: 'Low Margin'
    },
    {
      id: 'book',
      name: 'Bestseller Book',
      icon: 'üìö',
      retail: 30,
      wholesale: 15,
      salvage: 5,
      category: 'Medium Margin'
    },
    {
      id: 'coffee',
      name: 'Coffee Maker',
      icon: '‚òï',
      retail: 150,
      wholesale: 90,
      salvage: 50,
      category: 'Medium Margin'
    }
  ];

  const calculateMargin = (product) => {
    return ((product.retail - product.wholesale) / product.retail * 100).toFixed(1);
  };

  const calculateCriticalRatio = (product) => {
    const underage = product.retail - product.wholesale;
    const overage = product.wholesale - product.salvage;
    return (underage / (underage + overage));
  };

  const calculateOptimalServiceLevel = (product) => {
    return (calculateCriticalRatio(product) * 100).toFixed(1);
  };

  const calculateOrderQuantity = (serviceLevel) => {
    // For uniform distribution: Q = min + (max - min) * service_level
    return Math.round(MIN_DEMAND + (MAX_DEMAND - MIN_DEMAND) * (serviceLevel / 100));
  };

  const initializeServiceLevels = () => {
    const initial = {};
    const initialShortage = {};
    const initialExcess = {};
    const initialOptimal = {};
    products.forEach(p => {
      initial[p.id] = 50; // Start at 50% service level
      initialShortage[p.id] = '';
      initialExcess[p.id] = '';
      initialOptimal[p.id] = '';
    });
    setServiceLevels(initial);
    setCostOfShortage(initialShortage);
    setCostOfExcess(initialExcess);
    setOptimalServiceLevel(initialOptimal);
  };

  const startGame = () => {
    initializeServiceLevels();
    setGameStarted(true);
    setResults(null);
    setShowAnalysis(false);
  };

  const runSimulation = () => {
    const simulationResults = {};

    products.forEach(product => {
      const serviceLevel = serviceLevels[product.id] || 50;
      const orderQty = calculateOrderQuantity(serviceLevel);
      
      let totalProfit = 0;
      let totalStockouts = 0;
      let totalLeftover = 0;
      let totalSales = 0;
      let periodsData = [];

      // Run simulation for multiple periods
      for (let i = 0; i < PERIODS; i++) {
        const demand = Math.floor(Math.random() * (MAX_DEMAND - MIN_DEMAND + 1)) + MIN_DEMAND;
        const sold = Math.min(orderQty, demand);
        const leftover = Math.max(0, orderQty - demand);
        const stockout = Math.max(0, demand - orderQty);
        
        const revenue = sold * product.retail;
        const cost = orderQty * product.wholesale;
        const salvageValue = leftover * product.salvage;
        const profit = revenue - cost + salvageValue;
        
        totalProfit += profit;
        totalStockouts += stockout;
        totalLeftover += leftover;
        totalSales += sold;
        
        periodsData.push({ demand, sold, leftover, stockout, profit });
      }

      // Calculate optimal profit with optimal service level
      const optimalSL = calculateCriticalRatio(product);
      const optimalQty = Math.round(MIN_DEMAND + (MAX_DEMAND - MIN_DEMAND) * optimalSL);
      let optimalTotalProfit = 0;

      periodsData.forEach(period => {
        const optimalSold = Math.min(optimalQty, period.demand);
        const optimalLeftover = Math.max(0, optimalQty - period.demand);
        const optimalRevenue = optimalSold * product.retail;
        const optimalCost = optimalQty * product.wholesale;
        const optimalSalvage = optimalLeftover * product.salvage;
        optimalTotalProfit += optimalRevenue - optimalCost + optimalSalvage;
      });

      const achievedServiceLevel = ((PERIODS * orderQty - totalLeftover) / (PERIODS * orderQty)) * 100;
      const stockoutRate = (totalStockouts / (totalSales + totalStockouts)) * 100;

      simulationResults[product.id] = {
        product,
        targetServiceLevel: serviceLevel,
        orderQuantity: orderQty,
        totalProfit,
        avgProfit: totalProfit / PERIODS,
        totalStockouts,
        totalLeftover,
        achievedServiceLevel: achievedServiceLevel.toFixed(1),
        stockoutRate: stockoutRate.toFixed(1),
        optimalServiceLevel: calculateOptimalServiceLevel(product),
        optimalQuantity: optimalQty,
        optimalProfit: optimalTotalProfit,
        profitDifference: totalProfit - optimalTotalProfit
      };
    });

    setResults(simulationResults);
    setShowAnalysis(true);
  };

  const handleServiceLevelChange = (productId, value) => {
    setServiceLevels(prev => ({
      ...prev,
      [productId]: parseInt(value)
    }));
  };

  if (!gameStarted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-600 p-8">
        <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-2xl p-8">
          <h1 className="text-4xl font-bold text-center mb-6 text-blue-800">
            üè™ Retail Service Level Manager üè™
          </h1>
          
          <div className="bg-blue-50 p-6 rounded-lg mb-6">
            <h2 className="text-2xl font-bold mb-4 text-blue-700">Your Challenge</h2>
            <p className="text-lg mb-4">
              You're managing inventory for a retail store with 6 different products. For each product, 
              you need to set a <span className="font-bold">target service level</span> ‚Äî the percentage 
              of customer demand you aim to satisfy from stock.
            </p>
            
            <div className="bg-white p-4 rounded-lg border-2 border-blue-300 mb-4">
              <h3 className="font-bold text-blue-700 mb-2">üéØ What is Service Level?</h3>
              <p className="text-sm mb-2">
                Service level represents the probability that you'll have stock available when a customer wants to buy. 
                A 90% service level means you'll satisfy 90% of customer demand from inventory.
              </p>
              <p className="text-sm mb-2">
                <span className="font-bold">Demand assumption:</span> Demand is uniformly distributed between 50 and 150 units per period. 
                Every value in that range is equally likely.
              </p>
              <p className="text-sm mb-2">
                <span className="font-bold">Higher service level</span> = Order more inventory = Fewer stockouts, but more leftover items
              </p>
              <p className="text-sm">
                <span className="font-bold">Lower service level</span> = Order less inventory = More stockouts, but less leftover
              </p>
            </div>

            <div className="bg-yellow-50 p-4 rounded-lg border-2 border-yellow-300">
              <h3 className="font-bold text-yellow-800 mb-2">üí° The Key Insight</h3>
              <p className="text-sm">
                Not all products should have the same service level! Products with high profit margins can 
                justify higher service levels (the cost of a stockout is high). Products with low margins 
                should have lower service levels (the cost of leftover inventory is high relative to profit).
              </p>
            </div>
          </div>

          <div className="bg-green-50 p-6 rounded-lg mb-6">
            <h3 className="text-xl font-bold mb-3 text-green-800">How It Works</h3>
            <ol className="list-decimal list-inside space-y-2">
              <li>Review each product's economics (retail price, cost, margin)</li>
              <li>Set a target service level (0-100%) for each product</li>
              <li>Run a 20-period simulation to see how your strategy performs</li>
              <li>Compare your results to the optimal newsvendor solution</li>
            </ol>
          </div>

          <button
            onClick={startGame}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white text-xl font-bold py-4 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all transform hover:scale-105"
          >
            Start Managing Inventory! üìä
          </button>
        </div>
      </div>
    );
  }

  if (!showAnalysis) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-600 p-8">
        <div className="max-w-7xl mx-auto bg-white rounded-lg shadow-2xl p-8">
          <h1 className="text-3xl font-bold text-center mb-6 text-blue-800">
            üéØ Set Target Service Levels
          </h1>

          <div className="bg-blue-50 p-4 rounded-lg mb-6">
            <p className="text-center mb-2">
              For each product, calculate the cost of shortage and cost of excess, then determine the optimal service level.
            </p>
            <p className="text-center mb-2">
              <span className="font-bold text-blue-800">Demand is Uniformly distributed between 50 and 150 units per period.</span>
            </p>
            <p className="text-center font-bold text-blue-800">
              Formula: Optimal Service Level = Cs / (Cs + Ce)
            </p>
          </div>

          <div className="overflow-x-auto mb-6">
            <table className="w-full border-collapse text-sm">
              <thead className="bg-blue-100">
                <tr>
                  <th className="p-3 text-left border">Product</th>
                  <th className="p-3 text-center border">Retail Price</th>
                  <th className="p-3 text-center border">Wholesale Cost</th>
                  <th className="p-3 text-center border">Salvage Value</th>
                  <th className="p-3 text-center border">Cost of Shortage (Cs)</th>
                  <th className="p-3 text-center border">Cost of Excess (Ce)</th>
                  <th className="p-3 text-center border">Optimal SL (%)</th>
                  <th className="p-3 text-center border">Target Service Level</th>
                  <th className="p-3 text-center border">Order Qty</th>
                </tr>
              </thead>
              <tbody>
                {products.map(product => {
                  const serviceLevel = serviceLevels[product.id] || 50;
                  const orderQty = calculateOrderQuantity(serviceLevel);
                  const actualOptimalSL = parseFloat(calculateOptimalServiceLevel(product));
                  const userOptimalSL = parseFloat(optimalServiceLevel[product.id]) || 0;
                  const isOptimalCorrect = Math.abs(actualOptimalSL - userOptimalSL) < 1;
                  
                  const actualCs = product.retail - product.wholesale;
                  const actualCe = product.wholesale - product.salvage;
                  const userCs = parseFloat(costOfShortage[product.id]) || 0;
                  const userCe = parseFloat(costOfExcess[product.id]) || 0;
                  const isCsCorrect = Math.abs(actualCs - userCs) < 0.1;
                  const isCeCorrect = Math.abs(actualCe - userCe) < 0.1;
                  
                  return (
                    <tr key={product.id} className="hover:bg-gray-50">
                      <td className="p-3 border">
                        <div className="flex items-center gap-2">
                          <span className="text-2xl">{product.icon}</span>
                          <div>
                            <div className="font-bold">{product.name}</div>
                            <div className="text-xs text-gray-600">{product.category}</div>
                          </div>
                        </div>
                      </td>
                      <td className="p-3 text-center border font-bold text-green-600">
                        ${product.retail}
                      </td>
                      <td className="p-3 text-center border">
                        ${product.wholesale}
                      </td>
                      <td className="p-3 text-center border text-sm">
                        ${product.salvage}
                      </td>
                      <td className="p-3 border">
                        <input
                          type="number"
                          value={costOfShortage[product.id]}
                          onChange={(e) => setCostOfShortage(prev => ({...prev, [product.id]: e.target.value}))}
                          className={`w-full p-2 border-2 rounded text-center ${
                            isCsCorrect ? 'border-green-400 bg-green-50' : 'border-gray-300'
                          }`}
                          placeholder="$"
                        />
                      </td>
                      <td className="p-3 border">
                        <input
                          type="number"
                          value={costOfExcess[product.id]}
                          onChange={(e) => setCostOfExcess(prev => ({...prev, [product.id]: e.target.value}))}
                          className={`w-full p-2 border-2 rounded text-center ${
                            isCeCorrect ? 'border-green-400 bg-green-50' : 'border-gray-300'
                          }`}
                          placeholder="$"
                        />
                      </td>
                      <td className="p-3 border">
                        <input
                          type="number"
                          value={optimalServiceLevel[product.id]}
                          onChange={(e) => setOptimalServiceLevel(prev => ({...prev, [product.id]: e.target.value}))}
                          className={`w-full p-2 border-2 rounded text-center ${
                            isOptimalCorrect ? 'border-green-400 bg-green-50' : 'border-gray-300'
                          }`}
                          placeholder="%"
                          step="0.1"
                        />
                      </td>
                      <td className="p-3 border">
                        <div className="flex flex-col items-center gap-2">
                          <input
                            type="range"
                            min="0"
                            max="100"
                            value={serviceLevel}
                            onChange={(e) => handleServiceLevelChange(product.id, e.target.value)}
                            className="w-full"
                          />
                          <span className="font-bold text-lg">{serviceLevel}%</span>
                        </div>
                      </td>
                      <td className="p-3 text-center border">
                        <span className="text-lg font-bold text-blue-600">{orderQty}</span>
                        <div className="text-xs text-gray-600">units/period</div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          <div className="bg-yellow-50 p-4 rounded-lg mb-6">
            <h3 className="font-bold text-yellow-800 mb-2">üí° Calculating the Costs</h3>
            <div className="space-y-2 text-sm">
              <p>
                <span className="font-bold">Cost of Shortage (Cs):</span> The profit you lose when you stock out = Retail Price - Wholesale Cost
              </p>
              <p>
                <span className="font-bold">Cost of Excess (Ce):</span> The loss you take on leftover inventory = Wholesale Cost - Salvage Value
              </p>
              <p>
                <span className="font-bold">Optimal Service Level:</span> Cs / (Cs + Ce) √ó 100 to convert to percentage
              </p>
              <p className="text-xs text-gray-600 italic mt-2">
                The input fields will turn green when your calculations are correct!
              </p>
            </div>
          </div>

          <button
            onClick={runSimulation}
            className="w-full bg-gradient-to-r from-green-600 to-blue-600 text-white text-xl font-bold py-4 rounded-lg hover:from-green-700 hover:to-blue-700 transition-all"
          >
            Run 20-Period Simulation üöÄ
          </button>
        </div>
      </div>
    );
  }

  // Results view
  const totalYourProfit = Object.values(results).reduce((sum, r) => sum + r.totalProfit, 0);
  const totalOptimalProfit = Object.values(results).reduce((sum, r) => sum + r.optimalProfit, 0);
  const profitGap = totalYourProfit - totalOptimalProfit;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-600 p-8">
      <div className="max-w-7xl mx-auto bg-white rounded-lg shadow-2xl p-8">
        <h1 className="text-4xl font-bold text-center mb-6 text-blue-800">
          üìä Simulation Results
        </h1>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div className="bg-green-100 p-6 rounded-lg text-center">
            <div className="text-3xl font-bold text-green-700">
              ${totalYourProfit.toLocaleString()}
            </div>
            <div className="text-sm text-green-600">Your Total Profit (20 periods)</div>
          </div>
          <div className="bg-purple-100 p-6 rounded-lg text-center">
            <div className="text-3xl font-bold text-purple-700">
              ${totalOptimalProfit.toLocaleString()}
            </div>
            <div className="text-sm text-purple-600">Optimal Total Profit</div>
          </div>
          <div className={`p-6 rounded-lg text-center ${profitGap >= 0 ? 'bg-blue-100' : 'bg-orange-100'}`}>
            <div className={`text-3xl font-bold ${profitGap >= 0 ? 'text-blue-700' : 'text-orange-700'}`}>
              {profitGap >= 0 ? '+' : ''}${profitGap.toLocaleString()}
            </div>
            <div className={`text-sm ${profitGap >= 0 ? 'text-blue-600' : 'text-orange-600'}`}>
              Difference from Optimal
            </div>
          </div>
        </div>

        <div className="bg-yellow-50 p-6 rounded-lg mb-6">
          <h3 className="text-xl font-bold mb-3 text-yellow-800">üéØ Key Insights</h3>
          <div className="space-y-2 text-sm">
            <p>
              <span className="font-bold">Service Level Strategy:</span> The optimal service level for each product 
              depends on its <span className="font-bold">Critical Ratio (CR)</span> = (Price - Cost) / (Price - Salvage).
            </p>
            <p>
              <span className="font-bold">High-margin products</span> (like headphones and jackets) should have HIGH 
              service levels (~90%) because the profit from each sale is large relative to the cost of excess inventory.
            </p>
            <p>
              <span className="font-bold">Low-margin products</span> (like smartphones and laptops) should have LOW 
              service levels (~50-70%) because leftover inventory costs almost as much as the potential profit.
            </p>
          </div>
        </div>

        <div className="overflow-x-auto mb-6">
          <h3 className="text-xl font-bold mb-4">Detailed Results by Product</h3>
          <table className="w-full text-sm border-collapse">
            <thead className="bg-blue-100">
              <tr>
                <th className="p-2 text-left border">Product</th>
                <th className="p-2 text-center border">Margin %</th>
                <th className="p-2 text-center border">Your SL</th>
                <th className="p-2 text-center border">Optimal SL</th>
                <th className="p-2 text-center border">Order Qty</th>
                <th className="p-2 text-center border">Stockouts</th>
                <th className="p-2 text-center border">Leftover</th>
                <th className="p-2 text-center border">Your Profit</th>
                <th className="p-2 text-center border">Optimal Profit</th>
                <th className="p-2 text-center border">Difference</th>
              </tr>
            </thead>
            <tbody>
              {Object.values(results).map((result, idx) => {
                const margin = calculateMargin(result.product);
                return (
                  <tr key={idx} className="hover:bg-gray-50">
                    <td className="p-2 border">
                      <div className="flex items-center gap-2">
                        <span className="text-xl">{result.product.icon}</span>
                        <span className="font-semibold">{result.product.name}</span>
                      </div>
                    </td>
                    <td className="p-2 text-center border">
                      <span className={`font-bold px-2 py-1 rounded ${
                        parseFloat(margin) > 50 ? 'bg-green-100 text-green-700' :
                        parseFloat(margin) > 30 ? 'bg-yellow-100 text-yellow-700' :
                        'bg-red-100 text-red-700'
                      }`}>
                        {margin}%
                      </span>
                    </td>
                    <td className="p-2 text-center border font-bold">{result.targetServiceLevel}%</td>
                    <td className="p-2 text-center border font-bold text-purple-700">
                      {result.optimalServiceLevel}%
                    </td>
                    <td className="p-2 text-center border">{result.orderQuantity}</td>
                    <td className="p-2 text-center border text-red-600">{result.totalStockouts}</td>
                    <td className="p-2 text-center border text-orange-600">{result.totalLeftover}</td>
                    <td className="p-2 text-right border font-bold text-green-600">
                      ${result.totalProfit.toLocaleString()}
                    </td>
                    <td className="p-2 text-right border font-bold text-purple-600">
                      ${result.optimalProfit.toLocaleString()}
                    </td>
                    <td className={`p-2 text-right border font-bold ${
                      result.profitDifference >= 0 ? 'text-blue-600' : 'text-orange-600'
                    }`}>
                      {result.profitDifference >= 0 ? '+' : ''}${result.profitDifference.toLocaleString()}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        <div className="bg-purple-50 p-6 rounded-lg mb-6">
          <h3 className="text-xl font-bold mb-3 text-purple-800">üìö The Newsvendor Formula</h3>
          <div className="bg-white p-4 rounded-lg">
            <p className="font-mono text-sm mb-2">
              Optimal Service Level = CR = (Price - Cost) / (Price - Salvage)
            </p>
            <p className="text-sm text-gray-700 mb-3">
              This critical ratio tells you what percentage of demand you should try to satisfy. 
              It balances the cost of understocking (lost profit) vs. overstocking (salvage loss).
            </p>
            <div className="grid grid-cols-2 gap-4 text-xs">
              <div>
                <p className="font-bold mb-1">High CR (High Margin):</p>
                <p>Premium Headphones: CR = (200-80)/(200-40) = 0.75 ‚Üí Stock aggressively!</p>
              </div>
              <div>
                <p className="font-bold mb-1">Low CR (Low Margin):</p>
                <p>Smartphone: CR = (800-720)/(800-680) = 0.67 ‚Üí Stock conservatively!</p>
              </div>
            </div>
          </div>
        </div>

        <div className="flex gap-4">
          <button
            onClick={() => {
              setShowAnalysis(false);
              setResults(null);
            }}
            className="flex-1 bg-gray-200 text-gray-700 text-lg font-bold py-3 rounded-lg hover:bg-gray-300"
          >
            Adjust Service Levels üîß
          </button>
          <button
            onClick={() => {
              setGameStarted(false);
              setResults(null);
              setShowAnalysis(false);
            }}
            className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white text-lg font-bold py-3 rounded-lg hover:from-blue-700 hover:to-purple-700"
          >
            Start Over üîÑ
          </button>
        </div>
      </div>
    </div>
  );
};

export default ServiceLevelSim;
